# Claude Code: Build ELK Stack Ansible Project

You have access to the reference materials:
- ELK_INSTALLATION_LOG.md - Tested manual installation workflow
- install-elk-stack.yml - Working playbook with task patterns

Create a production-ready Ansible project using these tested workflows as your foundation.

## Project Structure to Create

```
elk-stack/
├── README.md
├── ansible.cfg
├── inventory.yml
├── site.yml
└── roles/
    ├── java_install/tasks/main.yml
    ├── elasticsearch/
    │   ├── tasks/main.yml
    │   └── handlers/main.yml
    ├── kibana/
    │   ├── tasks/main.yml
    │   └── handlers/main.yml
    ├── logstash/
    │   ├── tasks/main.yml
    │   └── handlers/main.yml
    └── credentials_management/tasks/main.yml
```

## Key Requirements

### Variables (in site.yml)
- elastic_version: "8.19.5"
- elasticsearch_port: 9200
- kibana_port: 5601
- logstash_port: 5000
- credentials_dir: "/var/elk-credentials"
- gpg_key_url: "https://artifacts.elastic.co/GPG-KEY-elasticsearch"
- elastic_repo_baseurl: "https://artifacts.elastic.co/packages/8.x/yum"

### Role Execution Order
1. java_install - Install Java 21 OpenJDK
2. elasticsearch - Install, start, capture password
3. kibana - Install, start, generate enrollment token
4. logstash - Install, start, ready for config
5. credentials_management - Save credentials locally and on target

### Critical Implementation Details

**Password Capture (Elasticsearch)**
- Extract from /var/log/elasticsearch/elasticsearch.log
- Use shell module with grep and sed
- Store in variable with no_log: true
- Handle gracefully if not found

**Kibana Enrollment Token**
- Generate using: /usr/share/elasticsearch/bin/elasticsearch-create-enrollment-token -s kibana
- Store in fact with no_log: true
- Handle failures without breaking playbook

**Service Readiness**
- Elasticsearch: Wait for https://localhost:9200 (15 retries, 4s delay)
- Kibana: Wait for http://localhost:5601/api/status (20 retries, 3s delay)
- Use ignore_errors: yes on wait tasks

**Repository Configuration**
- Use copy module with inline content (not dnf config-manager - fails on dnf5)
- Create files in /etc/yum.repos.d/
- Include: gpgcheck, gpgkey, autorefresh, type=rpm-md

**Service Management**
- Use systemd module for all operations
- Always reload daemon before first service start
- Create handlers for restarts

### Credentials File Content
Save to /var/elk-credentials/elk-credentials.txt with:
- Elasticsearch credentials and connection info
- Kibana enrollment token
- All URLs and ports
- Service management commands
- Next steps and troubleshooting guide
- Ansible timestamp and hostname

Fetch to control machine: ./elk-credentials-{{ inventory_hostname }}.txt

### Best Practices to Follow
- Proper module usage (dnf, systemd, uri, fetch, copy, shell)
- Clear task naming
- Register and conditionals
- Handlers for events
- Variable organization
- Error handling with ignore_errors and failed_when
- Idempotent design
- Changed tracking with changed_when
- Sensitive data with no_log
- Comments for complex tasks
- Tags for selective execution
- Pre/post task organization
- Fact assertions
- Professional debug output

## Pre-tasks
- Display system info
- Assert minimum requirements (2GB RAM, Fedora/RHEL)
- Create credentials directory

## Post-tasks
- Display installation summary with visual formatting
- Show access URLs and ports
- Display service verification commands
- Reference credentials file location

## Supported Systems
- Fedora 38+
- RHEL 8+
- CentOS Stream 8+
- Rocky Linux 8+
- AlmaLinux 8+

Build this project using the reference installation logs as your workflow foundation.
